// Atlas Agent Database Schema
// PlanetScale MySQL database for geography game

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// User Profiles (Google OAuth)
model User {
  id            String   @id @default(cuid())
  googleId      String   @unique
  email         String   @unique
  name          String
  avatar        String?
  createdAt     DateTime @default(now())
  lastLoginAt   DateTime @updatedAt
  
  // User Progress
  totalScore    Int      @default(0)
  agentLevel    String   @default("Trainee")
  completedRegions Json  @default("[]")
  unlockedRegions  Json  @default("[\"western-europe\"]")
  
  // Stats
  totalQuestions   Int @default(0)
  correctAnswers   Int @default(0)
  gamesPlayed      Int @default(0)
  
  // Relations  
  gameSessions     GameSession[]
  leaderboardEntries LeaderboardEntry[]
  
  @@map("users")
  @@index([email])
  @@index([totalScore])
}

// Game Sessions
model GameSession {
  id               String   @id @default(cuid())
  userId           String?  // Optional - allows guest play
  agentName        String
  score            Int      @default(0)
  completedRegions Json     @default("[]")
  unlockedRegions  Json     @default("[\"western-europe\"]")
  currentMission   String?
  agentLevel       String   @default("Trainee")
  startTime        DateTime @default(now())
  lastActivity     DateTime @updatedAt
  
  // Relations
  user             User?    @relation(fields: [userId], references: [id])
  answers          Answer[]
  leaderboardEntry LeaderboardEntry?
  
  @@map("game_sessions")
  @@index([userId])
}

// Questions Database
model Question {
  id            String   @id @default(cuid())
  question      String   @db.Text
  options       Json     // Array of 4 options
  correctAnswer String
  difficulty    String   // easy, medium, hard
  region        String
  createdAt     DateTime @default(now())
  
  // Relations
  answers       Answer[]
  
  @@map("questions")
  @@index([region])
  @@index([difficulty])
}

// Answer History
model Answer {
  id            String      @id @default(cuid())
  sessionId     String
  questionId    String
  selectedAnswer String
  isCorrect     Boolean
  pointsEarned  Int
  answeredAt    DateTime    @default(now())
  
  // Relations
  session       GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id])
  
  @@map("answers")
  @@index([sessionId])
  @@index([questionId])
}

// Leaderboard
model LeaderboardEntry {
  id                String      @id @default(cuid())
  sessionId         String      @unique
  userId            String?     // Optional - allows guest entries
  agentName         String
  score             Int
  completedRegions  Json        @default("[]")
  agentLevel        String
  regionsCompleted  Int
  completedAt       DateTime    @default(now())
  
  // Relations
  user              User?       @relation(fields: [userId], references: [id])
  session           GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("leaderboard")
  @@index([userId])
  @@index([score])
  @@index([agentLevel])
  @@index([completedAt])
}
